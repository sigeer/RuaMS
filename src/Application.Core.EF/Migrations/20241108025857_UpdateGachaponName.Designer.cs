// <auto-generated />
using System;
using Application.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Application.Core.EF.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20241108025857_UpdateGachaponName")]
    partial class UpdateGachaponName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Application.Core.EF.Entities.ExpLogRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<int>("CharId")
                        .HasColumnType("int")
                        .HasColumnName("charid");

                    b.Property<int>("CurrentExp")
                        .HasColumnType("int")
                        .HasColumnName("current_exp");

                    b.Property<int>("ExpCoupon")
                        .HasColumnType("int")
                        .HasColumnName("exp_coupon");

                    b.Property<DateTimeOffset>("ExpGainTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("exp_gain_time")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("GainedExp")
                        .HasColumnType("bigint")
                        .HasColumnName("gained_exp");

                    b.Property<int>("WorldExpRate")
                        .HasColumnType("int")
                        .HasColumnName("world_exp_rate");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("characterexplogs", (string)null);
                });

            modelBuilder.Entity("Application.Core.EF.Entities.Gachapons.GachaponPool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("''");

                    b.Property<int>("NpcId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("gachapon_pool", (string)null);
                });

            modelBuilder.Entity("Application.Core.EF.Entities.Gachapons.GachaponPoolItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("PoolId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("gachapon_pool_item", (string)null);
                });

            modelBuilder.Entity("Application.Core.EF.Entities.Gachapons.GachaponPoolLevelChance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Chance")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("PoolId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("gachapon_pool_level_chance", (string)null);
                });

            modelBuilder.Entity("Application.EF.DB_Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("Deleted")
                        .HasColumnType("int(2)")
                        .HasColumnName("deleted");

                    b.Property<int>("Fame")
                        .HasColumnType("int(11)")
                        .HasColumnName("fame");

                    b.Property<string>("From")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)")
                        .HasColumnName("from")
                        .HasDefaultValueSql("''");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("timestamp");

                    b.Property<string>("To")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)")
                        .HasColumnName("to")
                        .HasDefaultValueSql("''");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("notes", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.AccountEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<sbyte>("Banned")
                        .HasColumnType("tinyint")
                        .HasColumnName("banned");

                    b.Property<string>("Banreason")
                        .HasColumnType("text")
                        .HasColumnName("banreason");

                    b.Property<DateTime>("Birthday")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("birthday")
                        .HasDefaultValueSql("'2005-05-11'");

                    b.Property<sbyte>("Characterslots")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(2)")
                        .HasColumnName("characterslots")
                        .HasDefaultValueSql("'3'");

                    b.Property<DateTimeOffset>("Createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("email");

                    b.Property<sbyte>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(2)")
                        .HasColumnName("gender")
                        .HasDefaultValueSql("'10'");

                    b.Property<sbyte>("Greason")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("greason");

                    b.Property<string>("Hwid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("hwid")
                        .HasDefaultValueSql("''");

                    b.Property<string>("Ip")
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<int>("Language")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(1)")
                        .HasColumnName("language")
                        .HasDefaultValueSql("'2'");

                    b.Property<DateTimeOffset?>("Lastlogin")
                        .HasColumnType("timestamp")
                        .HasColumnName("lastlogin");

                    b.Property<sbyte>("Loggedin")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("loggedin");

                    b.Property<string>("Macs")
                        .HasColumnType("tinytext")
                        .HasColumnName("macs");

                    b.Property<int?>("MaplePoint")
                        .HasColumnType("int(11)")
                        .HasColumnName("maplePoint");

                    b.Property<int?>("Mute")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(1)")
                        .HasColumnName("mute")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("''");

                    b.Property<string>("Nick")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("nick");

                    b.Property<int?>("NxCredit")
                        .HasColumnType("int(11)")
                        .HasColumnName("nxCredit");

                    b.Property<int?>("NxPrepaid")
                        .HasColumnType("int(11)")
                        .HasColumnName("nxPrepaid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("password")
                        .HasDefaultValueSql("''");

                    b.Property<string>("Pic")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("pic")
                        .HasDefaultValueSql("''");

                    b.Property<string>("Pin")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("pin")
                        .HasDefaultValueSql("''");

                    b.Property<int>("Rewardpoints")
                        .HasColumnType("int(11)")
                        .HasColumnName("rewardpoints");

                    b.Property<string>("Sitelogged")
                        .HasColumnType("text")
                        .HasColumnName("sitelogged");

                    b.Property<DateTimeOffset>("Tempban")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("tempban")
                        .HasDefaultValueSql("'2005-05-11 00:00:00'");

                    b.Property<bool>("Tos")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("tos");

                    b.Property<int>("Votepoints")
                        .HasColumnType("int(11)")
                        .HasColumnName("votepoints");

                    b.Property<int?>("Webadmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(1)")
                        .HasColumnName("webadmin")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Id", "Name" }, "id");

                    b.HasIndex(new[] { "Id", "NxCredit", "MaplePoint", "NxPrepaid" }, "id_2");

                    b.HasIndex(new[] { "Name" }, "name")
                        .IsUnique();

                    b.HasIndex(new[] { "Id", "Banned" }, "ranking1");

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.AllianceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id");

                    b.Property<int>("Capacity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("capacity")
                        .HasDefaultValueSql("'2'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)")
                        .HasColumnName("name");

                    b.Property<string>("Notice")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("notice")
                        .HasDefaultValueSql("''");

                    b.Property<string>("Rank1")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("rank1")
                        .HasDefaultValueSql("'Master'");

                    b.Property<string>("Rank2")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("rank2")
                        .HasDefaultValueSql("'Jr. Master'");

                    b.Property<string>("Rank3")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("rank3")
                        .HasDefaultValueSql("'Member'");

                    b.Property<string>("Rank4")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("rank4")
                        .HasDefaultValueSql("'Member'");

                    b.Property<string>("Rank5")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("rank5")
                        .HasDefaultValueSql("'Member'");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "name")
                        .HasDatabaseName("name1");

                    b.ToTable("alliance", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Allianceguild", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id");

                    b.Property<int>("AllianceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)")
                        .HasColumnName("allianceid")
                        .HasDefaultValueSql("'-1'");

                    b.Property<int>("GuildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)")
                        .HasColumnName("guildid")
                        .HasDefaultValueSql("'-1'");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("allianceguilds", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.AreaInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("Area")
                        .HasColumnType("int(11)")
                        .HasColumnName("area");

                    b.Property<int>("Charid")
                        .HasColumnType("int(11)")
                        .HasColumnName("charid");

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("info");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("area_info", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.BbsReply", b =>
                {
                    b.Property<int>("Replyid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("replyid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("content")
                        .HasDefaultValueSql("''");

                    b.Property<int>("Postercid")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("postercid");

                    b.Property<int>("Threadid")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("threadid");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("timestamp");

                    b.HasKey("Replyid")
                        .HasName("PRIMARY");

                    b.ToTable("bbs_replies", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.BbsThread", b =>
                {
                    b.Property<int>("Threadid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("threadid");

                    b.Property<int>("Guildid")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("guildid");

                    b.Property<short>("Icon")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("icon");

                    b.Property<int>("Localthreadid")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("localthreadid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("''");

                    b.Property<int>("Postercid")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("postercid");

                    b.Property<short>("Replycount")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("replycount");

                    b.Property<string>("Startpost")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("startpost");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("timestamp");

                    b.HasKey("Threadid")
                        .HasName("PRIMARY");

                    b.ToTable("bbs_threads", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.BosslogDaily", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Attempttime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("attempttime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Bosstype")
                        .IsRequired()
                        .HasColumnType("enum('ZAKUM','HORNTAIL','PINKBEAN','SCARGA','PAPULATUS')")
                        .HasColumnName("bosstype");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int(11)")
                        .HasColumnName("characterid");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("bosslog_daily", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.BosslogWeekly", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Attempttime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("attempttime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Bosstype")
                        .IsRequired()
                        .HasColumnType("enum('ZAKUM','HORNTAIL','PINKBEAN','SCARGA','PAPULATUS')")
                        .HasColumnName("bosstype");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int(11)")
                        .HasColumnName("characterid");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("bosslog_weekly", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Buddy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("BuddyId")
                        .HasColumnType("int(11)")
                        .HasColumnName("buddyid");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int(11)")
                        .HasColumnName("characterid");

                    b.Property<string>("Group")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(17)
                        .HasColumnType("varchar(17)")
                        .HasColumnName("group")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("Pending")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("pending");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("buddies", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.CharacterEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("AccountId")
                        .HasColumnType("int(11)")
                        .HasColumnName("accountid");

                    b.Property<int>("AllianceRank")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)")
                        .HasColumnName("allianceRank")
                        .HasDefaultValueSql("'5'");

                    b.Property<int>("Ap")
                        .HasColumnType("int(11)")
                        .HasColumnName("ap");

                    b.Property<int>("AriantPoints")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("ariantPoints");

                    b.Property<int>("BuddyCapacity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("buddyCapacity")
                        .HasDefaultValueSql("'25'");

                    b.Property<DateTimeOffset>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("createdate")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("DataString")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("dataString")
                        .HasDefaultValueSql("''");

                    b.Property<int>("Dex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("dex")
                        .HasDefaultValueSql("'5'");

                    b.Property<int>("DojoPoints")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("dojoPoints");

                    b.Property<int>("Equipslots")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("equipslots")
                        .HasDefaultValueSql("'24'");

                    b.Property<int>("Etcslots")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("etcslots")
                        .HasDefaultValueSql("'24'");

                    b.Property<int>("Exp")
                        .HasColumnType("int(11)")
                        .HasColumnName("exp");

                    b.Property<int>("Face")
                        .HasColumnType("int(11)")
                        .HasColumnName("face");

                    b.Property<int>("Fame")
                        .HasColumnType("int(11)")
                        .HasColumnName("fame");

                    b.Property<int>("FamilyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("familyId")
                        .HasDefaultValueSql("'-1'");

                    b.Property<sbyte>("FinishedDojoTutorial")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("finishedDojoTutorial");

                    b.Property<int>("Fquest")
                        .HasColumnType("int(11)")
                        .HasColumnName("fquest");

                    b.Property<int>("Gachaexp")
                        .HasColumnType("int(11)")
                        .HasColumnName("gachaexp");

                    b.Property<int>("Gender")
                        .HasColumnType("int(11)")
                        .HasColumnName("gender");

                    b.Property<sbyte>("Gm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("gm")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("GuildId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("guildid");

                    b.Property<int>("GuildRank")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("guildrank")
                        .HasDefaultValueSql("'5'");

                    b.Property<int>("Hair")
                        .HasColumnType("int(11)")
                        .HasColumnName("hair");

                    b.Property<bool>("HasMerchant")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int>("Hp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("hp")
                        .HasDefaultValueSql("'50'");

                    b.Property<int>("HpMpUsed")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("hpMpUsed");

                    b.Property<int>("Int")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("int")
                        .HasDefaultValueSql("'4'");

                    b.Property<long>("Jailexpire")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("jailexpire");

                    b.Property<int>("JobId")
                        .HasColumnType("int(11)")
                        .HasColumnName("job");

                    b.Property<int>("JobRank")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("jobRank")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("JobRankMove")
                        .HasColumnType("int(11)")
                        .HasColumnName("jobRankMove");

                    b.Property<int>("LastDojoStage")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("lastDojoStage");

                    b.Property<DateTimeOffset>("LastExpGainTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("lastExpGainTime")
                        .HasDefaultValueSql("'2015-01-01 05:00:00'");

                    b.Property<DateTimeOffset>("LastLogoutTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("lastLogoutTime")
                        .HasDefaultValueSql("'2015-01-01 05:00:00'");

                    b.Property<int>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("level")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("Luk")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("luk")
                        .HasDefaultValueSql("'4'");

                    b.Property<int>("Map")
                        .HasColumnType("int(11)")
                        .HasColumnName("map");

                    b.Property<int>("MarriageItemId")
                        .HasColumnType("int(11)")
                        .HasColumnName("marriageItemId");

                    b.Property<int>("Matchcardlosses")
                        .HasColumnType("int(11)")
                        .HasColumnName("matchcardlosses");

                    b.Property<int>("Matchcardties")
                        .HasColumnType("int(11)")
                        .HasColumnName("matchcardties");

                    b.Property<int>("Matchcardwins")
                        .HasColumnType("int(11)")
                        .HasColumnName("matchcardwins");

                    b.Property<int>("Maxhp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("maxhp")
                        .HasDefaultValueSql("'50'");

                    b.Property<int>("Maxmp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("maxmp")
                        .HasDefaultValueSql("'5'");

                    b.Property<int>("MerchantMesos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("Meso")
                        .HasColumnType("int(11)")
                        .HasColumnName("meso");

                    b.Property<int>("MessengerId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("messengerid");

                    b.Property<int>("MessengerPosition")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("messengerposition")
                        .HasDefaultValueSql("'4'");

                    b.Property<int>("Monsterbookcover")
                        .HasColumnType("int(11)")
                        .HasColumnName("monsterbookcover");

                    b.Property<int>("MountExp")
                        .HasColumnType("int(9)")
                        .HasColumnName("mountexp");

                    b.Property<int>("MountLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(9)")
                        .HasColumnName("mountlevel")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("Mounttiredness")
                        .HasColumnType("int(9)")
                        .HasColumnName("mounttiredness");

                    b.Property<int>("Mp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("mp")
                        .HasDefaultValueSql("'5'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("''");

                    b.Property<int>("Omoklosses")
                        .HasColumnType("int(11)")
                        .HasColumnName("omoklosses");

                    b.Property<int>("Omokties")
                        .HasColumnType("int(11)")
                        .HasColumnName("omokties");

                    b.Property<int>("Omokwins")
                        .HasColumnType("int(11)")
                        .HasColumnName("omokwins");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("partnerId");

                    b.Property<int>("Party")
                        .HasColumnType("int(11)")
                        .HasColumnName("party");

                    b.Property<bool>("PartySearch")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("partySearch");

                    b.Property<int>("Pqpoints")
                        .HasColumnType("int(11)")
                        .HasColumnName("PQPoints");

                    b.Property<int>("Rank")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("rank")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("RankMove")
                        .HasColumnType("int(11)")
                        .HasColumnName("rankMove");

                    b.Property<int>("Reborns")
                        .HasColumnType("int(5)")
                        .HasColumnName("reborns");

                    b.Property<int>("Setupslots")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("setupslots")
                        .HasDefaultValueSql("'24'");

                    b.Property<int>("Skincolor")
                        .HasColumnType("int(11)")
                        .HasColumnName("skincolor");

                    b.Property<string>("Sp")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("sp")
                        .HasDefaultValueSql("'0,0,0,0,0,0,0,0,0,0'");

                    b.Property<int>("Spawnpoint")
                        .HasColumnType("int(11)")
                        .HasColumnName("spawnpoint");

                    b.Property<int>("Str")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("str")
                        .HasDefaultValueSql("'12'");

                    b.Property<int>("SummonValue")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("summonValue");

                    b.Property<int>("Useslots")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("useslots")
                        .HasDefaultValueSql("'24'");

                    b.Property<int>("VanquisherKills")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("vanquisherKills");

                    b.Property<int>("VanquisherStage")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("vanquisherStage");

                    b.Property<int>("World")
                        .HasColumnType("int(11)")
                        .HasColumnName("world");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AccountId" }, "accountid");

                    b.HasIndex(new[] { "Id", "AccountId", "World" }, "id")
                        .HasDatabaseName("id1");

                    b.HasIndex(new[] { "Id", "AccountId", "Name" }, "id_2")
                        .HasDatabaseName("id_21");

                    b.HasIndex(new[] { "Party" }, "party");

                    b.HasIndex(new[] { "Level", "Exp" }, "ranking1")
                        .HasDatabaseName("ranking11");

                    b.HasIndex(new[] { "Gm", "JobId" }, "ranking2");

                    b.ToTable("characters", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Cooldown", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("Charid")
                        .HasColumnType("int(11)")
                        .HasColumnName("charid");

                    b.Property<long>("Length")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("length");

                    b.Property<int>("SkillId")
                        .HasColumnType("int(11)")
                        .HasColumnName("SkillID");

                    b.Property<long>("StartTime")
                        .HasColumnType("bigint(20) unsigned");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("cooldowns", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.DB_FamilyEntitlement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("Charid")
                        .HasColumnType("int(11)")
                        .HasColumnName("charid");

                    b.Property<int>("Entitlementid")
                        .HasColumnType("int(11)")
                        .HasColumnName("entitlementid");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("timestamp");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Charid" }, "charid");

                    b.ToTable("family_entitlement", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.DB_Marriage", b =>
                {
                    b.Property<int>("Marriageid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("marriageid");

                    b.Property<int>("Husbandid")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("husbandid");

                    b.Property<int>("Wifeid")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("wifeid");

                    b.HasKey("Marriageid")
                        .HasName("PRIMARY");

                    b.ToTable("marriages", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.DB_Shop", b =>
                {
                    b.Property<int>("ShopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("shopid");

                    b.Property<int>("NpcId")
                        .HasColumnType("int(11)")
                        .HasColumnName("npcid");

                    b.HasKey("ShopId")
                        .HasName("PRIMARY");

                    b.ToTable("shops", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.DB_Storage", b =>
                {
                    b.Property<int>("Storageid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("storageid");

                    b.Property<int>("Accountid")
                        .HasColumnType("int(11)")
                        .HasColumnName("accountid");

                    b.Property<int>("Meso")
                        .HasColumnType("int(11)")
                        .HasColumnName("meso");

                    b.Property<int>("Slots")
                        .HasColumnType("int(11)")
                        .HasColumnName("slots");

                    b.Property<int>("World")
                        .HasColumnType("int(2)")
                        .HasColumnName("world");

                    b.HasKey("Storageid")
                        .HasName("PRIMARY");

                    b.ToTable("storages", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.DropDataGlobal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<int>("Chance")
                        .HasColumnType("int(11)")
                        .HasColumnName("chance");

                    b.Property<string>("Comments")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("comments");

                    b.Property<sbyte>("Continent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("continent")
                        .HasDefaultValueSql("'-1'");

                    b.Property<int>("Itemid")
                        .HasColumnType("int(11)")
                        .HasColumnName("itemid");

                    b.Property<int>("MaximumQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("maximum_quantity")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("MinimumQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("minimum_quantity")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("Questid")
                        .HasColumnType("int(11)")
                        .HasColumnName("questid");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Continent" }, "mobid");

                    b.ToTable("drop_data_global", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.DropDatum", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    b.Property<int>("Chance")
                        .HasColumnType("int(11)")
                        .HasColumnName("chance");

                    b.Property<int>("Dropperid")
                        .HasColumnType("int(11)")
                        .HasColumnName("dropperid");

                    b.Property<int>("Itemid")
                        .HasColumnType("int(11)")
                        .HasColumnName("itemid");

                    b.Property<int>("MaximumQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("maximum_quantity")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("MinimumQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("minimum_quantity")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("Questid")
                        .HasColumnType("int(11)")
                        .HasColumnName("questid");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Dropperid", "Itemid" }, "dropperid")
                        .IsUnique();

                    b.HasIndex(new[] { "Dropperid", "Itemid" }, "dropperid_2");

                    b.HasIndex(new[] { "Dropperid" }, "mobid")
                        .HasDatabaseName("mobid1");

                    b.ToTable("drop_data", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Dueyitem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id");

                    b.Property<int>("Inventoryitemid")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("inventoryitemid");

                    b.Property<int>("PackageId")
                        .HasColumnType("int(10) unsigned");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Inventoryitemid" }, "INVENTORYITEMID");

                    b.HasIndex(new[] { "PackageId" }, "PackageId");

                    b.ToTable("dueyitems", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Dueypackage", b =>
                {
                    b.Property<int>("PackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned");

                    b.Property<sbyte>("Checked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1) unsigned")
                        .HasDefaultValue((sbyte)1);

                    b.Property<int>("Mesos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Message")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<DateTimeOffset>("TimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'2015-01-01 05:00:00'");

                    b.Property<sbyte>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1) unsigned")
                        .HasDefaultValue((sbyte)0);

                    b.HasKey("PackageId")
                        .HasName("PRIMARY");

                    b.ToTable("dueypackages", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Eventstat", b =>
                {
                    b.Property<int>("Characterid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("characterid");

                    b.Property<int>("Info")
                        .HasColumnType("int(11)")
                        .HasColumnName("info");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("'0'")
                        .HasComment("0");

                    b.HasKey("Characterid")
                        .HasName("PRIMARY");

                    b.ToTable("eventstats", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Famelog", b =>
                {
                    b.Property<int>("Famelogid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("famelogid");

                    b.Property<int>("Characterid")
                        .HasColumnType("int(11)")
                        .HasColumnName("characterid");

                    b.Property<int>("CharacteridTo")
                        .HasColumnType("int(11)")
                        .HasColumnName("characterid_to");

                    b.Property<DateTimeOffset>("When")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("when")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Famelogid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Characterid" }, "characterid");

                    b.ToTable("famelog", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.FamilyCharacter", b =>
                {
                    b.Property<int>("Cid")
                        .HasColumnType("int(11)")
                        .HasColumnName("cid");

                    b.Property<int>("Familyid")
                        .HasColumnType("int(11)")
                        .HasColumnName("familyid");

                    b.Property<long>("Lastresettime")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("lastresettime");

                    b.Property<string>("Precepts")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("precepts");

                    b.Property<int>("Reptosenior")
                        .HasColumnType("int(11)")
                        .HasColumnName("reptosenior");

                    b.Property<int>("Reputation")
                        .HasColumnType("int(11)")
                        .HasColumnName("reputation");

                    b.Property<int>("Seniorid")
                        .HasColumnType("int(11)")
                        .HasColumnName("seniorid");

                    b.Property<int>("Todaysrep")
                        .HasColumnType("int(11)")
                        .HasColumnName("todaysrep");

                    b.Property<int>("Totalreputation")
                        .HasColumnType("int(11)")
                        .HasColumnName("totalreputation");

                    b.HasKey("Cid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Cid", "Familyid" }, "cid");

                    b.ToTable("family_character", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Fredstorage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id");

                    b.Property<int>("Cid")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("cid");

                    b.Property<int>("Daynotes")
                        .HasColumnType("int(4) unsigned")
                        .HasColumnName("daynotes");

                    b.Property<DateTimeOffset>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Cid" }, "cid_2")
                        .IsUnique();

                    b.ToTable("fredstorage", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Gift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)")
                        .HasColumnName("from");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("tinytext")
                        .HasColumnName("message");

                    b.Property<int>("Ringid")
                        .HasColumnType("int(10)")
                        .HasColumnName("ringid");

                    b.Property<int>("Sn")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("sn");

                    b.Property<int>("To")
                        .HasColumnType("int(11)")
                        .HasColumnName("to");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("gifts", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.GuildEntity", b =>
                {
                    b.Property<int>("GuildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("guildid");

                    b.Property<int>("AllianceId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("allianceId");

                    b.Property<int>("Capacity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("capacity")
                        .HasDefaultValueSql("'10'");

                    b.Property<int>("GP")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("GP");

                    b.Property<int>("Leader")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("leader");

                    b.Property<int>("Logo")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("logo");

                    b.Property<int>("LogoBg")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("logoBG");

                    b.Property<short>("LogoBgColor")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("logoBGColor");

                    b.Property<short>("LogoColor")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("logoColor");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.Property<string>("Notice")
                        .HasMaxLength(101)
                        .HasColumnType("varchar(101)")
                        .HasColumnName("notice");

                    b.Property<string>("Rank1Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("rank1title")
                        .HasDefaultValueSql("'Master'");

                    b.Property<string>("Rank2Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("rank2title")
                        .HasDefaultValueSql("'Jr. Master'");

                    b.Property<string>("Rank3Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("rank3title")
                        .HasDefaultValueSql("'Member'");

                    b.Property<string>("Rank4Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("rank4title")
                        .HasDefaultValueSql("'Member'");

                    b.Property<string>("Rank5Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("rank5title")
                        .HasDefaultValueSql("'Member'");

                    b.Property<int>("Signature")
                        .HasColumnType("int(11)")
                        .HasColumnName("signature");

                    b.HasKey("GuildId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "GuildId", "Name" }, "guildid");

                    b.ToTable("guilds", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Hwidaccount", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int(11)")
                        .HasColumnName("accountid");

                    b.Property<string>("Hwid")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("hwid")
                        .HasDefaultValueSql("''");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("expiresat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<sbyte>("Relevance")
                        .HasColumnType("tinyint(2)")
                        .HasColumnName("relevance");

                    b.HasKey("AccountId", "Hwid")
                        .HasName("PRIMARY");

                    b.ToTable("hwidaccounts", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Hwidban", b =>
                {
                    b.Property<int>("Hwidbanid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("hwidbanid");

                    b.Property<string>("Hwid")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("hwid");

                    b.HasKey("Hwidbanid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Hwid" }, "hwid_2")
                        .IsUnique();

                    b.ToTable("hwidbans", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Inventoryitem", b =>
                {
                    b.Property<int>("Inventoryitemid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("inventoryitemid");

                    b.Property<int?>("Accountid")
                        .HasColumnType("int(11)")
                        .HasColumnName("accountid");

                    b.Property<int?>("Characterid")
                        .HasColumnType("int(11)")
                        .HasColumnName("characterid");

                    b.Property<long>("Expiration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("expiration")
                        .HasDefaultValueSql("'-1'");

                    b.Property<int>("Flag")
                        .HasColumnType("int(11)")
                        .HasColumnName("flag");

                    b.Property<string>("GiftFrom")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("giftFrom");

                    b.Property<int>("Inventorytype")
                        .HasColumnType("int(11)")
                        .HasColumnName("inventorytype");

                    b.Property<int>("Itemid")
                        .HasColumnType("int(11)")
                        .HasColumnName("itemid");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("tinytext")
                        .HasColumnName("owner");

                    b.Property<int>("Petid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("petid")
                        .HasDefaultValueSql("'-1'");

                    b.Property<int>("Position")
                        .HasColumnType("int(11)")
                        .HasColumnName("position");

                    b.Property<int>("Quantity")
                        .HasColumnType("int(11)")
                        .HasColumnName("quantity");

                    b.Property<sbyte>("Type")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("type");

                    b.HasKey("Inventoryitemid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Characterid" }, "CHARID");

                    b.ToTable("inventoryitems", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Inventorymerchant", b =>
                {
                    b.Property<int>("Inventorymerchantid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("inventorymerchantid");

                    b.Property<int>("Bundles")
                        .HasColumnType("int(10)")
                        .HasColumnName("bundles");

                    b.Property<int?>("Characterid")
                        .HasColumnType("int(11)")
                        .HasColumnName("characterid");

                    b.Property<int>("Inventoryitemid")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("inventoryitemid");

                    b.HasKey("Inventorymerchantid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Inventoryitemid" }, "INVENTORYITEMID")
                        .HasDatabaseName("INVENTORYITEMID1");

                    b.ToTable("inventorymerchant", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Ipban", b =>
                {
                    b.Property<int>("Ipbanid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("ipbanid");

                    b.Property<string>("Aid")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("aid");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ip")
                        .HasDefaultValueSql("''");

                    b.HasKey("Ipbanid")
                        .HasName("PRIMARY");

                    b.ToTable("ipbans", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Keymap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("Action")
                        .HasColumnType("int(11)")
                        .HasColumnName("action");

                    b.Property<int>("Characterid")
                        .HasColumnType("int(11)")
                        .HasColumnName("characterid");

                    b.Property<int>("Key")
                        .HasColumnType("int(11)")
                        .HasColumnName("key");

                    b.Property<int>("Type")
                        .HasColumnType("int(11)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("keymap", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Macban", b =>
                {
                    b.Property<int>("Macbanid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("macbanid");

                    b.Property<string>("Aid")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("aid");

                    b.Property<string>("Mac")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("mac");

                    b.HasKey("Macbanid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Mac" }, "mac_2")
                        .IsUnique();

                    b.ToTable("macbans", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Macfilter", b =>
                {
                    b.Property<int>("Macfilterid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("macfilterid");

                    b.Property<string>("Filter")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("filter");

                    b.HasKey("Macfilterid")
                        .HasName("PRIMARY");

                    b.ToTable("macfilters", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Makercreatedatum", b =>
                {
                    b.Property<sbyte>("Id")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("id");

                    b.Property<int>("Itemid")
                        .HasColumnType("int(11)")
                        .HasColumnName("itemid");

                    b.Property<int>("Catalyst")
                        .HasColumnType("int(11)")
                        .HasColumnName("catalyst");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("quantity");

                    b.Property<int>("ReqEquip")
                        .HasColumnType("int(11)")
                        .HasColumnName("req_equip");

                    b.Property<int>("ReqItem")
                        .HasColumnType("int(11)")
                        .HasColumnName("req_item");

                    b.Property<sbyte>("ReqLevel")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("req_level");

                    b.Property<sbyte>("ReqMakerLevel")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("req_maker_level");

                    b.Property<int>("ReqMeso")
                        .HasColumnType("int(11)")
                        .HasColumnName("req_meso");

                    b.Property<sbyte>("Tuc")
                        .HasColumnType("tinyint(3)")
                        .HasColumnName("tuc");

                    b.HasKey("Id", "Itemid")
                        .HasName("PRIMARY");

                    b.ToTable("makercreatedata", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Makerreagentdatum", b =>
                {
                    b.Property<int>("Itemid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("itemid");

                    b.Property<string>("Stat")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("stat");

                    b.Property<short>("Value")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("value");

                    b.HasKey("Itemid")
                        .HasName("PRIMARY");

                    b.ToTable("makerreagentdata", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Makerrecipedatum", b =>
                {
                    b.Property<int>("Itemid")
                        .HasColumnType("int(11)")
                        .HasColumnName("itemid");

                    b.Property<int>("ReqItem")
                        .HasColumnType("int(11)")
                        .HasColumnName("req_item");

                    b.Property<short>("Count")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("count");

                    b.HasKey("Itemid", "ReqItem")
                        .HasName("PRIMARY");

                    b.ToTable("makerrecipedata", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Makerrewarddatum", b =>
                {
                    b.Property<int>("Itemid")
                        .HasColumnType("int(11)")
                        .HasColumnName("itemid");

                    b.Property<int>("Rewardid")
                        .HasColumnType("int(11)")
                        .HasColumnName("rewardid");

                    b.Property<sbyte>("Prob")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("prob")
                        .HasDefaultValueSql("'100'");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("quantity");

                    b.HasKey("Itemid", "Rewardid")
                        .HasName("PRIMARY");

                    b.ToTable("makerrewarddata", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Medalmap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("Characterid")
                        .HasColumnType("int(11)")
                        .HasColumnName("characterid");

                    b.Property<int>("Mapid")
                        .HasColumnType("int(11)")
                        .HasColumnName("mapid");

                    b.Property<int>("Queststatusid")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("queststatusid");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Queststatusid" }, "queststatusid");

                    b.ToTable("medalmaps", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Monstercarddatum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("Cardid")
                        .HasColumnType("int(11)")
                        .HasColumnName("cardid");

                    b.Property<int>("Mobid")
                        .HasColumnType("int(11)")
                        .HasColumnName("mobid");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Id" }, "id")
                        .IsUnique()
                        .HasDatabaseName("id2");

                    b.ToTable("monstercarddata", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.MtsCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("Cid")
                        .HasColumnType("int(11)")
                        .HasColumnName("cid");

                    b.Property<int>("Itemid")
                        .HasColumnType("int(11)")
                        .HasColumnName("itemid");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("mts_cart", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.MtsItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id");

                    b.Property<int>("Acc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("acc")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("Avoid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("avoid")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("BidIncre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("bid_incre")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("BuyNow")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("buy_now")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("Dex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("dex")
                        .HasDefaultValueSql("'0'");

                    b.Property<long>("Expiration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("expiration")
                        .HasDefaultValueSql("'-1'");

                    b.Property<int>("Flag")
                        .HasColumnType("int(2) unsigned")
                        .HasColumnName("flag");

                    b.Property<string>("GiftFrom")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("giftFrom");

                    b.Property<int>("Hands")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("hands")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("Hp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("hp")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("Int")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("Isequip")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(1)")
                        .HasColumnName("isequip")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("Itemexp")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("itemexp");

                    b.Property<int>("Itemid")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("itemid");

                    b.Property<int>("Itemlevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("itemlevel")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("Jump")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("jump")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("level")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("Locked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("locked")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("Luk")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("luk")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("Matk")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("matk")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("Mdef")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("mdef")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("Mp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("mp")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("owner")
                        .HasDefaultValueSql("''");

                    b.Property<int>("Position")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("position")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("Price")
                        .HasColumnType("int(11)")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("quantity")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("Ringid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ringid")
                        .HasDefaultValueSql("'-1'");

                    b.Property<string>("SellEnds")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("sell_ends");

                    b.Property<int>("Seller")
                        .HasColumnType("int(11)")
                        .HasColumnName("seller");

                    b.Property<string>("Sellername")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("sellername");

                    b.Property<int>("Speed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("speed")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("Str")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("str")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("Tab")
                        .HasColumnType("int(11)")
                        .HasColumnName("tab");

                    b.Property<int>("Transfer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(2)")
                        .HasColumnName("transfer")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("Type")
                        .HasColumnType("int(11)")
                        .HasColumnName("type");

                    b.Property<int>("Upgradeslots")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("upgradeslots")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("Vicious")
                        .HasColumnType("int(2) unsigned")
                        .HasColumnName("vicious");

                    b.Property<int>("Watk")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("watk")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("Wdef")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("wdef")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("mts_items", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Namechange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("Characterid")
                        .HasColumnType("int(11)")
                        .HasColumnName("characterid");

                    b.Property<DateTimeOffset?>("CompletionTime")
                        .HasColumnType("timestamp")
                        .HasColumnName("completionTime");

                    b.Property<string>("New")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)")
                        .HasColumnName("new");

                    b.Property<string>("Old")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)")
                        .HasColumnName("old");

                    b.Property<DateTimeOffset>("RequestTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("requestTime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Characterid" }, "characterid")
                        .HasDatabaseName("characterid1");

                    b.ToTable("namechanges", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.NxcodeItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("Codeid")
                        .HasColumnType("int(11)")
                        .HasColumnName("codeid");

                    b.Property<int>("Item")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("item")
                        .HasDefaultValueSql("'4000000'");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("quantity")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("type")
                        .HasDefaultValueSql("'5'");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("nxcode_items", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Nxcoupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("Activeday")
                        .HasColumnType("int(11)")
                        .HasColumnName("activeday");

                    b.Property<int>("CouponId")
                        .HasColumnType("int(11)")
                        .HasColumnName("couponid");

                    b.Property<int>("Endhour")
                        .HasColumnType("int(11)")
                        .HasColumnName("endhour");

                    b.Property<int>("Rate")
                        .HasColumnType("int(11)")
                        .HasColumnName("rate");

                    b.Property<int>("Starthour")
                        .HasColumnType("int(11)")
                        .HasColumnName("starthour");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("nxcoupons", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.PetEntity", b =>
                {
                    b.Property<int>("Petid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("petid");

                    b.Property<int>("Closeness")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("closeness");

                    b.Property<int>("Flag")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("flag");

                    b.Property<int>("Fullness")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fullness");

                    b.Property<int>("Level")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("level");

                    b.Property<string>("Name")
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)")
                        .HasColumnName("name");

                    b.Property<bool>("Summoned")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("summoned");

                    b.HasKey("Petid")
                        .HasName("PRIMARY");

                    b.ToTable("pets", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Petignore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("id");

                    b.Property<int>("Itemid")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("itemid");

                    b.Property<int>("Petid")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("petid");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Petid" }, "fk_petignorepetid");

                    b.ToTable("petignores", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Playerdisease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("Charid")
                        .HasColumnType("int(11)")
                        .HasColumnName("charid");

                    b.Property<int>("Disease")
                        .HasColumnType("int(11)")
                        .HasColumnName("disease");

                    b.Property<int>("Length")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("length")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("Mobskillid")
                        .HasColumnType("int(11)")
                        .HasColumnName("mobskillid");

                    b.Property<int>("Mobskilllv")
                        .HasColumnType("int(11)")
                        .HasColumnName("mobskilllv");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("playerdiseases", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Playernpc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("Cy")
                        .HasColumnType("int(11)")
                        .HasColumnName("cy");

                    b.Property<int>("Dir")
                        .HasColumnType("int(11)")
                        .HasColumnName("dir");

                    b.Property<int>("Face")
                        .HasColumnType("int(11)")
                        .HasColumnName("face");

                    b.Property<int>("Fh")
                        .HasColumnType("int(11)")
                        .HasColumnName("fh");

                    b.Property<int>("Gender")
                        .HasColumnType("int(11)")
                        .HasColumnName("gender");

                    b.Property<int>("Hair")
                        .HasColumnType("int(11)")
                        .HasColumnName("hair");

                    b.Property<int>("Job")
                        .HasColumnType("int(11)")
                        .HasColumnName("job");

                    b.Property<int>("Map")
                        .HasColumnType("int(11)")
                        .HasColumnName("map");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)")
                        .HasColumnName("name");

                    b.Property<int>("Overallrank")
                        .HasColumnType("int(11)")
                        .HasColumnName("overallrank");

                    b.Property<int>("Rx0")
                        .HasColumnType("int(11)")
                        .HasColumnName("rx0");

                    b.Property<int>("Rx1")
                        .HasColumnType("int(11)")
                        .HasColumnName("rx1");

                    b.Property<int>("Scriptid")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("scriptid");

                    b.Property<int>("Skin")
                        .HasColumnType("int(11)")
                        .HasColumnName("skin");

                    b.Property<int>("World")
                        .HasColumnType("int(11)")
                        .HasColumnName("world");

                    b.Property<int>("Worldjobrank")
                        .HasColumnType("int(11)")
                        .HasColumnName("worldjobrank");

                    b.Property<int>("Worldrank")
                        .HasColumnType("int(11)")
                        .HasColumnName("worldrank");

                    b.Property<int>("X")
                        .HasColumnType("int(11)")
                        .HasColumnName("x");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("playernpcs", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.PlayernpcsEquip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("Equipid")
                        .HasColumnType("int(11)")
                        .HasColumnName("equipid");

                    b.Property<int>("Equippos")
                        .HasColumnType("int(11)")
                        .HasColumnName("equippos");

                    b.Property<int>("Npcid")
                        .HasColumnType("int(11)")
                        .HasColumnName("npcid");

                    b.Property<int>("Type")
                        .HasColumnType("int(11)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("playernpcs_equip", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.PlayernpcsField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("Map")
                        .HasColumnType("int(11)")
                        .HasColumnName("map");

                    b.Property<short>("Podium")
                        .HasColumnType("smallint(8)")
                        .HasColumnName("podium");

                    b.Property<sbyte>("Step")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("step")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("World")
                        .HasColumnType("int(11)")
                        .HasColumnName("world");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("playernpcs_field", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Plife", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("id");

                    b.Property<int>("Cy")
                        .HasColumnType("int(11)")
                        .HasColumnName("cy");

                    b.Property<int>("F")
                        .HasColumnType("int(11)")
                        .HasColumnName("f");

                    b.Property<int>("Fh")
                        .HasColumnType("int(11)")
                        .HasColumnName("fh");

                    b.Property<int>("Hide")
                        .HasColumnType("int(11)")
                        .HasColumnName("hide");

                    b.Property<int>("Life")
                        .HasColumnType("int(11)")
                        .HasColumnName("life");

                    b.Property<int>("Map")
                        .HasColumnType("int(11)")
                        .HasColumnName("map");

                    b.Property<int>("Mobtime")
                        .HasColumnType("int(11)")
                        .HasColumnName("mobtime");

                    b.Property<int>("Rx0")
                        .HasColumnType("int(11)")
                        .HasColumnName("rx0");

                    b.Property<int>("Rx1")
                        .HasColumnType("int(11)")
                        .HasColumnName("rx1");

                    b.Property<int>("Team")
                        .HasColumnType("int(11)")
                        .HasColumnName("team");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("type")
                        .HasDefaultValueSql("'n'");

                    b.Property<int>("World")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("world")
                        .HasDefaultValueSql("'-1'");

                    b.Property<int>("X")
                        .HasColumnType("int(11)")
                        .HasColumnName("x");

                    b.Property<int>("Y")
                        .HasColumnType("int(11)")
                        .HasColumnName("y");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("plife", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.QuestStatusEntity", b =>
                {
                    b.Property<int>("Queststatusid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("queststatusid");

                    b.Property<int>("Characterid")
                        .HasColumnType("int(11)")
                        .HasColumnName("characterid");

                    b.Property<int>("Completed")
                        .HasColumnType("int(11)")
                        .HasColumnName("completed");

                    b.Property<long>("Expires")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("expires");

                    b.Property<int>("Forfeited")
                        .HasColumnType("int(11)")
                        .HasColumnName("forfeited");

                    b.Property<sbyte>("Info")
                        .HasColumnType("tinyint(3)")
                        .HasColumnName("info");

                    b.Property<int>("Quest")
                        .HasColumnType("int(11)")
                        .HasColumnName("quest");

                    b.Property<int>("Status")
                        .HasColumnType("int(11)")
                        .HasColumnName("status");

                    b.Property<int>("Time")
                        .HasColumnType("int(11)")
                        .HasColumnName("time");

                    b.HasKey("Queststatusid")
                        .HasName("PRIMARY");

                    b.ToTable("queststatus", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Questaction", b =>
                {
                    b.Property<int>("Questactionid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("questactionid");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("blob")
                        .HasColumnName("data");

                    b.Property<int>("Questid")
                        .HasColumnType("int(11)")
                        .HasColumnName("questid");

                    b.Property<int>("Status")
                        .HasColumnType("int(11)")
                        .HasColumnName("status");

                    b.HasKey("Questactionid")
                        .HasName("PRIMARY");

                    b.ToTable("questactions", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Questprogress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id");

                    b.Property<int>("Characterid")
                        .HasColumnType("int(11)")
                        .HasColumnName("characterid");

                    b.Property<string>("Progress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("progress")
                        .HasDefaultValueSql("''");

                    b.Property<int>("Progressid")
                        .HasColumnType("int(11)")
                        .HasColumnName("progressid");

                    b.Property<int>("Queststatusid")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("queststatusid");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("questprogress", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Questrequirement", b =>
                {
                    b.Property<int>("Questrequirementid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("questrequirementid");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("blob")
                        .HasColumnName("data");

                    b.Property<int>("Questid")
                        .HasColumnType("int(11)")
                        .HasColumnName("questid");

                    b.Property<int>("Status")
                        .HasColumnType("int(11)")
                        .HasColumnName("status");

                    b.HasKey("Questrequirementid")
                        .HasName("PRIMARY");

                    b.ToTable("questrequirements", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Quickslotkeymapped", b =>
                {
                    b.Property<int>("Accountid")
                        .HasColumnType("int(11)")
                        .HasColumnName("accountid");

                    b.Property<long>("Keymap")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("keymap");

                    b.HasKey("Accountid")
                        .HasName("PRIMARY");

                    b.ToTable("quickslotkeymapped", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Reactordrop", b =>
                {
                    b.Property<int>("Reactordropid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("reactordropid");

                    b.Property<int>("Chance")
                        .HasColumnType("int(11)")
                        .HasColumnName("chance");

                    b.Property<int>("Itemid")
                        .HasColumnType("int(11)")
                        .HasColumnName("itemid");

                    b.Property<int>("Questid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(5)")
                        .HasColumnName("questid")
                        .HasDefaultValueSql("'-1'");

                    b.Property<int>("Reactorid")
                        .HasColumnType("int(11)")
                        .HasColumnName("reactorid");

                    b.HasKey("Reactordropid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Reactorid" }, "reactorid");

                    b.ToTable("reactordrops", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Chatlog")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("chatlog");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<sbyte>("Reason")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("reason");

                    b.Property<int>("Reporterid")
                        .HasColumnType("int(11)")
                        .HasColumnName("reporterid");

                    b.Property<DateTimeOffset>("Reporttime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("reporttime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Victimid")
                        .HasColumnType("int(11)")
                        .HasColumnName("victimid");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("reports", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Chat")
                        .HasColumnType("text")
                        .HasColumnName("chat");

                    b.Property<string>("Response1")
                        .HasColumnType("text")
                        .HasColumnName("response");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("responses", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Ring_Entity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("ItemId")
                        .HasColumnType("int(11)")
                        .HasColumnName("itemid");

                    b.Property<int>("PartnerChrId")
                        .HasColumnType("int(11)")
                        .HasColumnName("partnerChrId");

                    b.Property<string>("PartnerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("partnername");

                    b.Property<int>("PartnerRingId")
                        .HasColumnType("int(11)")
                        .HasColumnName("partnerRingId");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("rings", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.SavedLocationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("Characterid")
                        .HasColumnType("int(11)")
                        .HasColumnName("characterid");

                    b.Property<string>("Locationtype")
                        .IsRequired()
                        .HasColumnType("enum('FREE_MARKET','WORLDTOUR','FLORINA','INTRO','SUNDAY_MARKET','MIRROR','EVENT','BOSSPQ','HAPPYVILLE','DEVELOPER','MONSTER_CARNIVAL')")
                        .HasColumnName("locationtype");

                    b.Property<int>("Map")
                        .HasColumnType("int(11)")
                        .HasColumnName("map");

                    b.Property<int>("Portal")
                        .HasColumnType("int(11)")
                        .HasColumnName("portal");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("savedlocations", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.ServerQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("Accountid")
                        .HasColumnType("int(11)")
                        .HasColumnName("accountid");

                    b.Property<int>("Characterid")
                        .HasColumnType("int(11)")
                        .HasColumnName("characterid");

                    b.Property<DateTimeOffset>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("createTime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("message");

                    b.Property<sbyte>("Type")
                        .HasColumnType("tinyint(2)")
                        .HasColumnName("type");

                    b.Property<int>("Value")
                        .HasColumnType("int(10)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("server_queue", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Shopitem", b =>
                {
                    b.Property<int>("Shopitemid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("shopitemid");

                    b.Property<int>("ItemId")
                        .HasColumnType("int(11)")
                        .HasColumnName("itemid");

                    b.Property<int>("Pitch")
                        .HasColumnType("int(11)")
                        .HasColumnName("pitch");

                    b.Property<int>("Position")
                        .HasColumnType("int(11)")
                        .HasColumnName("position")
                        .HasComment("sort is an arbitrary field designed to give leeway when modifying shops. The lowest number is 104 and it increments by 4 for each item to allow decent space for swapping/inserting/removing items.");

                    b.Property<int>("Price")
                        .HasColumnType("int(11)")
                        .HasColumnName("price");

                    b.Property<int>("Shopid")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("shopid");

                    b.HasKey("Shopitemid")
                        .HasName("PRIMARY");

                    b.ToTable("shopitems", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.SkillEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("Characterid")
                        .HasColumnType("int(11)")
                        .HasColumnName("characterid");

                    b.Property<long>("Expiration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("expiration")
                        .HasDefaultValueSql("'-1'");

                    b.Property<int>("Masterlevel")
                        .HasColumnType("int(11)")
                        .HasColumnName("masterlevel");

                    b.Property<int>("Skillid")
                        .HasColumnType("int(11)")
                        .HasColumnName("skillid");

                    b.Property<int>("Skilllevel")
                        .HasColumnType("int(11)")
                        .HasColumnName("skilllevel");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Skillid", "Characterid" }, "skillpair")
                        .IsUnique();

                    b.HasIndex(new[] { "Characterid" }, "skills_chrid_fk");

                    b.ToTable("skills", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Skillmacro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("Characterid")
                        .HasColumnType("int(11)")
                        .HasColumnName("characterid");

                    b.Property<string>("Name")
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)")
                        .HasColumnName("name");

                    b.Property<sbyte>("Position")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("position")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("Shout")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("shout")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("Skill1")
                        .HasColumnType("int(11)")
                        .HasColumnName("skill1");

                    b.Property<int>("Skill2")
                        .HasColumnType("int(11)")
                        .HasColumnName("skill2");

                    b.Property<int>("Skill3")
                        .HasColumnType("int(11)")
                        .HasColumnName("skill3");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("skillmacros", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Specialcashitem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("Info")
                        .HasColumnType("int(1)")
                        .HasColumnName("info");

                    b.Property<int>("Modifier")
                        .HasColumnType("int(11)")
                        .HasColumnName("modifier")
                        .HasComment("1024 is add/remove");

                    b.Property<int>("Sn")
                        .HasColumnType("int(11)")
                        .HasColumnName("sn");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("specialcashitems", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Trocklocation", b =>
                {
                    b.Property<int>("Trockid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("trockid");

                    b.Property<int>("Characterid")
                        .HasColumnType("int(11)")
                        .HasColumnName("characterid");

                    b.Property<int>("Mapid")
                        .HasColumnType("int(11)")
                        .HasColumnName("mapid");

                    b.Property<int>("Vip")
                        .HasColumnType("int(2)")
                        .HasColumnName("vip");

                    b.HasKey("Trockid")
                        .HasName("PRIMARY");

                    b.ToTable("trocklocations", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Wishlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("CharId")
                        .HasColumnType("int(11)")
                        .HasColumnName("charid");

                    b.Property<int>("Sn")
                        .HasColumnType("int(11)")
                        .HasColumnName("sn");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("wishlists", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Worldtransfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("Characterid")
                        .HasColumnType("int(11)")
                        .HasColumnName("characterid");

                    b.Property<DateTimeOffset?>("CompletionTime")
                        .HasColumnType("timestamp")
                        .HasColumnName("completionTime");

                    b.Property<sbyte>("From")
                        .HasColumnType("tinyint(3)")
                        .HasColumnName("from");

                    b.Property<DateTimeOffset>("RequestTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("requestTime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<sbyte>("To")
                        .HasColumnType("tinyint(3)")
                        .HasColumnName("to");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Characterid" }, "characterid")
                        .HasDatabaseName("characterid2");

                    b.ToTable("worldtransfers", (string)null);
                });

            modelBuilder.Entity("Application.EF.Inventoryequipment", b =>
                {
                    b.Property<int>("Inventoryequipmentid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("inventoryequipmentid");

                    b.Property<int>("Acc")
                        .HasColumnType("int(11)")
                        .HasColumnName("acc");

                    b.Property<int>("Avoid")
                        .HasColumnType("int(11)")
                        .HasColumnName("avoid");

                    b.Property<int>("Dex")
                        .HasColumnType("int(11)")
                        .HasColumnName("dex");

                    b.Property<int>("Hands")
                        .HasColumnType("int(11)")
                        .HasColumnName("hands");

                    b.Property<int>("Hp")
                        .HasColumnType("int(11)")
                        .HasColumnName("hp");

                    b.Property<int>("Int")
                        .HasColumnType("int(11)")
                        .HasColumnName("int");

                    b.Property<int>("Inventoryitemid")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("inventoryitemid");

                    b.Property<int>("Itemexp")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("itemexp");

                    b.Property<int>("Itemlevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("itemlevel")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("Jump")
                        .HasColumnType("int(11)")
                        .HasColumnName("jump");

                    b.Property<int>("Level")
                        .HasColumnType("int(11)")
                        .HasColumnName("level");

                    b.Property<int>("Locked")
                        .HasColumnType("int(11)")
                        .HasColumnName("locked");

                    b.Property<int>("Luk")
                        .HasColumnType("int(11)")
                        .HasColumnName("luk");

                    b.Property<int>("Matk")
                        .HasColumnType("int(11)")
                        .HasColumnName("matk");

                    b.Property<int>("Mdef")
                        .HasColumnType("int(11)")
                        .HasColumnName("mdef");

                    b.Property<int>("Mp")
                        .HasColumnType("int(11)")
                        .HasColumnName("mp");

                    b.Property<int>("RingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ringid")
                        .HasDefaultValueSql("'-1'");

                    b.Property<int>("Speed")
                        .HasColumnType("int(11)")
                        .HasColumnName("speed");

                    b.Property<int>("Str")
                        .HasColumnType("int(11)")
                        .HasColumnName("str");

                    b.Property<int>("Upgradeslots")
                        .HasColumnType("int(11)")
                        .HasColumnName("upgradeslots");

                    b.Property<int>("Vicious")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("vicious");

                    b.Property<int>("Watk")
                        .HasColumnType("int(11)")
                        .HasColumnName("watk");

                    b.Property<int>("Wdef")
                        .HasColumnType("int(11)")
                        .HasColumnName("wdef");

                    b.HasKey("Inventoryequipmentid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Inventoryitemid" }, "INVENTORYITEMID")
                        .HasDatabaseName("INVENTORYITEMID2");

                    b.ToTable("inventoryequipment", (string)null);
                });

            modelBuilder.Entity("Application.EF.Monsterbook", b =>
                {
                    b.Property<int>("Cardid")
                        .HasColumnType("int(11)")
                        .HasColumnName("cardid");

                    b.Property<int>("Charid")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("charid");

                    b.Property<int>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(1)")
                        .HasColumnName("level")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Cardid", "Charid");

                    b.ToTable("monsterbook", (string)null);
                });

            modelBuilder.Entity("Application.EF.Newyear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Message")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("message")
                        .HasDefaultValueSql("''");

                    b.Property<bool>("Received")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("received");

                    b.Property<bool>("ReceiverDiscard")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("receiverdiscard");

                    b.Property<int>("ReceiverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)")
                        .HasColumnName("receiverid")
                        .HasDefaultValueSql("'-1'");

                    b.Property<string>("ReceiverName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)")
                        .HasColumnName("receivername")
                        .HasDefaultValueSql("''");

                    b.Property<bool>("SenderDiscard")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("senderdiscard");

                    b.Property<int>("SenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)")
                        .HasColumnName("senderid")
                        .HasDefaultValueSql("'-1'");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)")
                        .HasColumnName("sendername")
                        .HasDefaultValueSql("''");

                    b.Property<long>("TimeReceived")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("timereceived");

                    b.Property<long>("TimeSent")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("timesent");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("newyear", (string)null);
                });

            modelBuilder.Entity("Application.EF.Nxcode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("varchar(17)")
                        .HasColumnName("code");

                    b.Property<long>("Expiration")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("expiration");

                    b.Property<string>("Retriever")
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)")
                        .HasColumnName("retriever");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Code" }, "code")
                        .IsUnique();

                    b.ToTable("nxcode", (string)null);
                });

            modelBuilder.Entity("Application.EF.Entities.Dueyitem", b =>
                {
                    b.HasOne("Application.EF.Entities.Dueypackage", "Package")
                        .WithMany("Dueyitems")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("dueyitems_ibfk_1");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("Application.EF.Entities.Famelog", b =>
                {
                    b.HasOne("Application.EF.Entities.CharacterEntity", "Character")
                        .WithMany("Famelogs")
                        .HasForeignKey("Characterid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("famelog_ibfk_1");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Application.EF.Entities.FamilyCharacter", b =>
                {
                    b.HasOne("Application.EF.Entities.CharacterEntity", "CidNavigation")
                        .WithOne("FamilyCharacter")
                        .HasForeignKey("Application.EF.Entities.FamilyCharacter", "Cid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("family_character_ibfk_1");

                    b.Navigation("CidNavigation");
                });

            modelBuilder.Entity("Application.EF.Entities.Petignore", b =>
                {
                    b.HasOne("Application.EF.Entities.PetEntity", "Pet")
                        .WithMany("Petignores")
                        .HasForeignKey("Petid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_petignorepetid");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("Application.EF.Entities.Quickslotkeymapped", b =>
                {
                    b.HasOne("Application.EF.Entities.AccountEntity", "Account")
                        .WithOne("Quickslotkeymapped")
                        .HasForeignKey("Application.EF.Entities.Quickslotkeymapped", "Accountid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("quickslotkeymapped_accountid_fk");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Application.EF.Entities.SkillEntity", b =>
                {
                    b.HasOne("Application.EF.Entities.CharacterEntity", "Character")
                        .WithMany()
                        .HasForeignKey("Characterid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Application.EF.Entities.AccountEntity", b =>
                {
                    b.Navigation("Quickslotkeymapped");
                });

            modelBuilder.Entity("Application.EF.Entities.CharacterEntity", b =>
                {
                    b.Navigation("Famelogs");

                    b.Navigation("FamilyCharacter");
                });

            modelBuilder.Entity("Application.EF.Entities.Dueypackage", b =>
                {
                    b.Navigation("Dueyitems");
                });

            modelBuilder.Entity("Application.EF.Entities.PetEntity", b =>
                {
                    b.Navigation("Petignores");
                });
#pragma warning restore 612, 618
        }
    }
}
